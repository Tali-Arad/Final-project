@model TourGuideProtocol.DataStruct.AReg

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>AReg</legend>

        <div class="editor-label">
            Tour Name
        </div>
        <div class="editor-field">
                @Html.DropDownList("TourNameOptions", (List<SelectListItem>)ViewBag.TourNameOptions, new { @Id = "tourName" })
        </div>

        <div class="editor-label">
           Tour Date
        </div>
        <div class="editor-field">
            @Html.DropDownList("TourDateOptions", (List<SelectListItem>)ViewBag.TourDateOptions, new { @Id = "tourDate" })
        </div>

        <div class="editor-label">
           Username
        </div>
        <div class="editor-field">
            @Html.DropDownList("UsernameOptions")
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.RegFirstName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.RegFirstName)
            @Html.ValidationMessageFor(model => model.RegFirstName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.RegLastName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.RegLastName)
            @Html.ValidationMessageFor(model => model.RegLastName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.RegBirthday)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.RegBirthday)
            @Html.ValidationMessageFor(model => model.RegBirthday)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.WillAttend)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.WillAttend)
            @Html.ValidationMessageFor(model => model.WillAttend)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.IsPaid)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.IsPaid)
            @Html.ValidationMessageFor(model => model.IsPaid)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.IsSentEmail)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.IsSentEmail)
            @Html.ValidationMessageFor(model => model.IsSentEmail)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Attended)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Attended)
            @Html.ValidationMessageFor(model => model.Attended)
        </div>

        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="@Url.Content("~/JS/jquery.min.js")"></script>
<script src="@Url.Content("~/JS/bootstrap.min.js")"></script>
<script src="@Url.Content("~/JS/bootstrap-accessibility_1.0.3.min.js")"></script>
<script src="@Url.Content("~/JS/functions.js")"></script>
<script src="@Url.Content("~/JS/jquery.dataTables.min.js")"></script>
<script src="@Url.Content("~/JS/dataTables.bootstrap.js")"></script>

<script language="javascript">
    $("#tourName").change(function () {
        var tourName = $(this).val();
        var Data = {
            Name: tourName
        }
       // console.log("call function")
        Type = "POST";
        Url = "http://localhost:53887/TourGuideSvc/TourGuideSvc.svc/GetTourDates"; // Do not hard code the URL! change this!
        ContentType = "application/json; charset=utf-8";
        DataType = "json"; varProcessData = true;

        $.ajax({
            type: Type,                   //GET or POST or PUT or DELETE verb
            url: Url,                     // Location of the service
            data: JSON.stringify(Data),             //Data sent to server
            contentType: ContentType,               // content type sent to server
            dataType: DataType,                     //Expected data format from server
            processdata: varProcessData,            //True or False
            success: function (msg) {               //On Successfull service call
                GetTourDatesSucceeded(msg);
            },
            error: ServiceFailed// When Service call fails
        });
    }
    )

 function ServiceFailed(result) {
        alert('Service call failed: ' + result.status + ' ' + result.statusText);
        Type = null;
        varUrl = null;
        Data = null;
        ContentType = null;
        DataType = null;
        ProcessData = null;
    }
    var tourDates = $('#tourDate');
    
    function GetTourDatesSucceeded(result) {    
       // console.log("GetTourDatesSucceeded")
        var tourDates = $('#tourDate');
        tourDates.empty();
        $.each(result, function (index, item) {
         //   console.log(item);
          //  console.log("Create Dropdown")
            tourDates.append("<option>" + this.Value + "</option>");

            // The following does not allow TourDateOptions choice to be passed back to the server:
            //$(document.createElement('option'))
            ////.attr('value', this)
            ////.text(this.Value)
            ////.appendTo(tourDates);
                });
        }
</script>