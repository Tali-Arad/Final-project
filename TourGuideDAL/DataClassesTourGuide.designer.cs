#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TourGuideDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TourGuideDB")]
	public partial class DataClassesTourGuideDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertTour(Tour instance);
    partial void UpdateTour(Tour instance);
    partial void DeleteTour(Tour instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClassesTourGuideDataContext() : 
				base(global::TourGuideDAL.Properties.Settings.Default.TourGuideDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesTourGuideDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesTourGuideDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesTourGuideDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesTourGuideDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<Tour> Tours
		{
			get
			{
				return this.GetTable<Tour>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TourID;
		
		private System.DateTime _TourDate;
		
		private string _TourGuide;
		
		private byte _IsOn;
		
		private EntitySet<Registration> _Registrations;
		
		private EntityRef<Tour> _Tour;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourIDChanging(System.Guid value);
    partial void OnTourIDChanged();
    partial void OnTourDateChanging(System.DateTime value);
    partial void OnTourDateChanged();
    partial void OnTourGuideChanging(string value);
    partial void OnTourGuideChanged();
    partial void OnIsOnChanging(byte value);
    partial void OnIsOnChanged();
    #endregion
		
		public Event()
		{
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Tour = default(EntityRef<Tour>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TourID
		{
			get
			{
				return this._TourID;
			}
			set
			{
				if ((this._TourID != value))
				{
					if (this._Tour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTourIDChanging(value);
					this.SendPropertyChanging();
					this._TourID = value;
					this.SendPropertyChanged("TourID");
					this.OnTourIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourDate", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime TourDate
		{
			get
			{
				return this._TourDate;
			}
			set
			{
				if ((this._TourDate != value))
				{
					this.OnTourDateChanging(value);
					this.SendPropertyChanging();
					this._TourDate = value;
					this.SendPropertyChanged("TourDate");
					this.OnTourDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourGuide", DbType="NVarChar(50)")]
		public string TourGuide
		{
			get
			{
				return this._TourGuide;
			}
			set
			{
				if ((this._TourGuide != value))
				{
					this.OnTourGuideChanging(value);
					this.SendPropertyChanging();
					this._TourGuide = value;
					this.SendPropertyChanged("TourGuide");
					this.OnTourGuideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOn", DbType="TinyInt NOT NULL")]
		public byte IsOn
		{
			get
			{
				return this._IsOn;
			}
			set
			{
				if ((this._IsOn != value))
				{
					this.OnIsOnChanging(value);
					this.SendPropertyChanging();
					this._IsOn = value;
					this.SendPropertyChanged("IsOn");
					this.OnIsOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Registration", Storage="_Registrations", ThisKey="TourID,TourDate", OtherKey="TourID,TourDate")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tour_Event", Storage="_Tour", ThisKey="TourID", OtherKey="TourID", IsForeignKey=true)]
		public Tour Tour
		{
			get
			{
				return this._Tour.Entity;
			}
			set
			{
				Tour previousValue = this._Tour.Entity;
				if (((previousValue != value) 
							|| (this._Tour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tour.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Tour.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._TourID = value.TourID;
					}
					else
					{
						this._TourID = default(System.Guid);
					}
					this.SendPropertyChanged("Tour");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registrations")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RegID;
		
		private System.Guid _TourID;
		
		private System.DateTime _TourDate;
		
		private System.Guid _UserID;
		
		private string _RegFirstName;
		
		private string _RegLastName;
		
		private System.DateTime _RegBirthday;
		
		private byte _WillAttend;
		
		private byte _IsPaid;
		
		private byte _IsSentEmail;
		
		private byte _Attended;
		
		private System.DateTime _RegTime;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegIDChanging(System.Guid value);
    partial void OnRegIDChanged();
    partial void OnTourIDChanging(System.Guid value);
    partial void OnTourIDChanged();
    partial void OnTourDateChanging(System.DateTime value);
    partial void OnTourDateChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnRegFirstNameChanging(string value);
    partial void OnRegFirstNameChanged();
    partial void OnRegLastNameChanging(string value);
    partial void OnRegLastNameChanged();
    partial void OnRegBirthdayChanging(System.DateTime value);
    partial void OnRegBirthdayChanged();
    partial void OnWillAttendChanging(byte value);
    partial void OnWillAttendChanged();
    partial void OnIsPaidChanging(byte value);
    partial void OnIsPaidChanged();
    partial void OnIsSentEmailChanging(byte value);
    partial void OnIsSentEmailChanged();
    partial void OnAttendedChanging(byte value);
    partial void OnAttendedChanged();
    partial void OnRegTimeChanging(System.DateTime value);
    partial void OnRegTimeChanged();
    #endregion
		
		public Registration()
		{
			this._Event = default(EntityRef<Event>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RegID
		{
			get
			{
				return this._RegID;
			}
			set
			{
				if ((this._RegID != value))
				{
					this.OnRegIDChanging(value);
					this.SendPropertyChanging();
					this._RegID = value;
					this.SendPropertyChanged("RegID");
					this.OnRegIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TourID
		{
			get
			{
				return this._TourID;
			}
			set
			{
				if ((this._TourID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTourIDChanging(value);
					this.SendPropertyChanging();
					this._TourID = value;
					this.SendPropertyChanged("TourID");
					this.OnTourIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourDate", DbType="DateTime NOT NULL")]
		public System.DateTime TourDate
		{
			get
			{
				return this._TourDate;
			}
			set
			{
				if ((this._TourDate != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTourDateChanging(value);
					this.SendPropertyChanging();
					this._TourDate = value;
					this.SendPropertyChanged("TourDate");
					this.OnTourDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RegFirstName
		{
			get
			{
				return this._RegFirstName;
			}
			set
			{
				if ((this._RegFirstName != value))
				{
					this.OnRegFirstNameChanging(value);
					this.SendPropertyChanging();
					this._RegFirstName = value;
					this.SendPropertyChanged("RegFirstName");
					this.OnRegFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegLastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RegLastName
		{
			get
			{
				return this._RegLastName;
			}
			set
			{
				if ((this._RegLastName != value))
				{
					this.OnRegLastNameChanging(value);
					this.SendPropertyChanging();
					this._RegLastName = value;
					this.SendPropertyChanged("RegLastName");
					this.OnRegLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegBirthday", DbType="Date NOT NULL")]
		public System.DateTime RegBirthday
		{
			get
			{
				return this._RegBirthday;
			}
			set
			{
				if ((this._RegBirthday != value))
				{
					this.OnRegBirthdayChanging(value);
					this.SendPropertyChanging();
					this._RegBirthday = value;
					this.SendPropertyChanged("RegBirthday");
					this.OnRegBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WillAttend", DbType="TinyInt NOT NULL")]
		public byte WillAttend
		{
			get
			{
				return this._WillAttend;
			}
			set
			{
				if ((this._WillAttend != value))
				{
					this.OnWillAttendChanging(value);
					this.SendPropertyChanging();
					this._WillAttend = value;
					this.SendPropertyChanged("WillAttend");
					this.OnWillAttendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaid", DbType="TinyInt NOT NULL")]
		public byte IsPaid
		{
			get
			{
				return this._IsPaid;
			}
			set
			{
				if ((this._IsPaid != value))
				{
					this.OnIsPaidChanging(value);
					this.SendPropertyChanging();
					this._IsPaid = value;
					this.SendPropertyChanged("IsPaid");
					this.OnIsPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSentEmail", DbType="TinyInt NOT NULL")]
		public byte IsSentEmail
		{
			get
			{
				return this._IsSentEmail;
			}
			set
			{
				if ((this._IsSentEmail != value))
				{
					this.OnIsSentEmailChanging(value);
					this.SendPropertyChanging();
					this._IsSentEmail = value;
					this.SendPropertyChanged("IsSentEmail");
					this.OnIsSentEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attended", DbType="TinyInt NOT NULL")]
		public byte Attended
		{
			get
			{
				return this._Attended;
			}
			set
			{
				if ((this._Attended != value))
				{
					this.OnAttendedChanging(value);
					this.SendPropertyChanging();
					this._Attended = value;
					this.SendPropertyChanged("Attended");
					this.OnAttendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegTime", DbType="DateTime NOT NULL")]
		public System.DateTime RegTime
		{
			get
			{
				return this._RegTime;
			}
			set
			{
				if ((this._RegTime != value))
				{
					this.OnRegTimeChanging(value);
					this.SendPropertyChanging();
					this._RegTime = value;
					this.SendPropertyChanged("RegTime");
					this.OnRegTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Registration", Storage="_Event", ThisKey="TourID,TourDate", OtherKey="TourID,TourDate", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._TourID = value.TourID;
						this._TourDate = value.TourDate;
					}
					else
					{
						this._TourID = default(System.Guid);
						this._TourDate = default(System.DateTime);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tours")]
	public partial class Tour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TourID;
		
		private string _TourName;
		
		private string _TourLocation;
		
		private string _TourCategory;
		
		private string _TourArea;
		
		private System.Nullable<short> _TourDuration;
		
		private System.Nullable<decimal> _TourPrice;
		
		private System.Nullable<byte> _MinReg;
		
		private System.Nullable<byte> _MaxReg;
		
		private string _TourDescription;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourIDChanging(System.Guid value);
    partial void OnTourIDChanged();
    partial void OnTourNameChanging(string value);
    partial void OnTourNameChanged();
    partial void OnTourLocationChanging(string value);
    partial void OnTourLocationChanged();
    partial void OnTourCategoryChanging(string value);
    partial void OnTourCategoryChanged();
    partial void OnTourAreaChanging(string value);
    partial void OnTourAreaChanged();
    partial void OnTourDurationChanging(System.Nullable<short> value);
    partial void OnTourDurationChanged();
    partial void OnTourPriceChanging(System.Nullable<decimal> value);
    partial void OnTourPriceChanged();
    partial void OnMinRegChanging(System.Nullable<byte> value);
    partial void OnMinRegChanged();
    partial void OnMaxRegChanging(System.Nullable<byte> value);
    partial void OnMaxRegChanged();
    partial void OnTourDescriptionChanging(string value);
    partial void OnTourDescriptionChanged();
    #endregion
		
		public Tour()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TourID
		{
			get
			{
				return this._TourID;
			}
			set
			{
				if ((this._TourID != value))
				{
					this.OnTourIDChanging(value);
					this.SendPropertyChanging();
					this._TourID = value;
					this.SendPropertyChanged("TourID");
					this.OnTourIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TourName
		{
			get
			{
				return this._TourName;
			}
			set
			{
				if ((this._TourName != value))
				{
					this.OnTourNameChanging(value);
					this.SendPropertyChanging();
					this._TourName = value;
					this.SendPropertyChanged("TourName");
					this.OnTourNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourLocation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TourLocation
		{
			get
			{
				return this._TourLocation;
			}
			set
			{
				if ((this._TourLocation != value))
				{
					this.OnTourLocationChanging(value);
					this.SendPropertyChanging();
					this._TourLocation = value;
					this.SendPropertyChanged("TourLocation");
					this.OnTourLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourCategory", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TourCategory
		{
			get
			{
				return this._TourCategory;
			}
			set
			{
				if ((this._TourCategory != value))
				{
					this.OnTourCategoryChanging(value);
					this.SendPropertyChanging();
					this._TourCategory = value;
					this.SendPropertyChanged("TourCategory");
					this.OnTourCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourArea", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TourArea
		{
			get
			{
				return this._TourArea;
			}
			set
			{
				if ((this._TourArea != value))
				{
					this.OnTourAreaChanging(value);
					this.SendPropertyChanging();
					this._TourArea = value;
					this.SendPropertyChanged("TourArea");
					this.OnTourAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourDuration", DbType="SmallInt")]
		public System.Nullable<short> TourDuration
		{
			get
			{
				return this._TourDuration;
			}
			set
			{
				if ((this._TourDuration != value))
				{
					this.OnTourDurationChanging(value);
					this.SendPropertyChanging();
					this._TourDuration = value;
					this.SendPropertyChanged("TourDuration");
					this.OnTourDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourPrice", DbType="Money")]
		public System.Nullable<decimal> TourPrice
		{
			get
			{
				return this._TourPrice;
			}
			set
			{
				if ((this._TourPrice != value))
				{
					this.OnTourPriceChanging(value);
					this.SendPropertyChanging();
					this._TourPrice = value;
					this.SendPropertyChanged("TourPrice");
					this.OnTourPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinReg", DbType="TinyInt")]
		public System.Nullable<byte> MinReg
		{
			get
			{
				return this._MinReg;
			}
			set
			{
				if ((this._MinReg != value))
				{
					this.OnMinRegChanging(value);
					this.SendPropertyChanging();
					this._MinReg = value;
					this.SendPropertyChanged("MinReg");
					this.OnMinRegChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxReg", DbType="TinyInt")]
		public System.Nullable<byte> MaxReg
		{
			get
			{
				return this._MaxReg;
			}
			set
			{
				if ((this._MaxReg != value))
				{
					this.OnMaxRegChanging(value);
					this.SendPropertyChanging();
					this._MaxReg = value;
					this.SendPropertyChanged("MaxReg");
					this.OnMaxRegChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TourDescription
		{
			get
			{
				return this._TourDescription;
			}
			set
			{
				if ((this._TourDescription != value))
				{
					this.OnTourDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TourDescription = value;
					this.SendPropertyChanged("TourDescription");
					this.OnTourDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tour_Event", Storage="_Events", ThisKey="TourID", OtherKey="TourID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Tour = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Tour = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private System.Nullable<System.DateTime> _RegTime;
		
		private string _RegIP;
		
		private string _UserFirstName;
		
		private string _UserLastName;
		
		private string _UserPhone;
		
		private string _UserEmail;
		
		private string _UserPassword;
		
		private System.DateTime _UserBirthday;
		
		private string _Username;
		
		private EntitySet<Registration> _Registrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnRegTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnRegTimeChanged();
    partial void OnRegIPChanging(string value);
    partial void OnRegIPChanged();
    partial void OnUserFirstNameChanging(string value);
    partial void OnUserFirstNameChanged();
    partial void OnUserLastNameChanging(string value);
    partial void OnUserLastNameChanged();
    partial void OnUserPhoneChanging(string value);
    partial void OnUserPhoneChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnUserBirthdayChanging(System.DateTime value);
    partial void OnUserBirthdayChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public User()
		{
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegTime
		{
			get
			{
				return this._RegTime;
			}
			set
			{
				if ((this._RegTime != value))
				{
					this.OnRegTimeChanging(value);
					this.SendPropertyChanging();
					this._RegTime = value;
					this.SendPropertyChanged("RegTime");
					this.OnRegTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegIP", DbType="NVarChar(50)")]
		public string RegIP
		{
			get
			{
				return this._RegIP;
			}
			set
			{
				if ((this._RegIP != value))
				{
					this.OnRegIPChanging(value);
					this.SendPropertyChanging();
					this._RegIP = value;
					this.SendPropertyChanged("RegIP");
					this.OnRegIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserFirstName
		{
			get
			{
				return this._UserFirstName;
			}
			set
			{
				if ((this._UserFirstName != value))
				{
					this.OnUserFirstNameChanging(value);
					this.SendPropertyChanging();
					this._UserFirstName = value;
					this.SendPropertyChanged("UserFirstName");
					this.OnUserFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserLastName
		{
			get
			{
				return this._UserLastName;
			}
			set
			{
				if ((this._UserLastName != value))
				{
					this.OnUserLastNameChanging(value);
					this.SendPropertyChanging();
					this._UserLastName = value;
					this.SendPropertyChanged("UserLastName");
					this.OnUserLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPhone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserPhone
		{
			get
			{
				return this._UserPhone;
			}
			set
			{
				if ((this._UserPhone != value))
				{
					this.OnUserPhoneChanging(value);
					this.SendPropertyChanging();
					this._UserPhone = value;
					this.SendPropertyChanged("UserPhone");
					this.OnUserPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBirthday", DbType="DateTime NOT NULL")]
		public System.DateTime UserBirthday
		{
			get
			{
				return this._UserBirthday;
			}
			set
			{
				if ((this._UserBirthday != value))
				{
					this.OnUserBirthdayChanging(value);
					this.SendPropertyChanging();
					this._UserBirthday = value;
					this.SendPropertyChanged("UserBirthday");
					this.OnUserBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_Registrations", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
